AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Launch Template EC2 Server for OpenVPN Implementation.
  A Nested Stack that comprises: 
  Bla Bla.
  Inputs include:
  Bla Bla.
  Outputs include:
  Bla Bla.
#-------------------------------------------


Metadata: {}


Parameters:
#===========================================

#--- The Project Name
#-------------------------------------------
  ProjectName:
    Description: Name of this Openvpn project.
    ConstraintDescription: Specify name of the project.
    Type: String
    Default: "dh-openvpn"
    MinLength: 3
    MaxLength: 63
    AllowedPattern: (?!^(\d{1,3}\.){3}\d{1,3}$)(^[a-z0-9]([a-z0-9-]*(\.[a-z0-9])?)*$(?<!\-))

#--- AMI for EC2 instance
#-------------------------------------------
  PrivateAmiId:
    Description: Private AMI ID
    Type: AWS::EC2::Image::Id
#-------------------------------------------

#--- Public Subnet ID
#-------------------------------------------
  PrivateSubnetIdA:
    Description: Private Subnet ID AZ-A
    Type: AWS::EC2::Subnet::Id
#-------------------------------------------

#--- Public Security Group Resource ID
#-------------------------------------------
  PrivateSgResourceId:
    Description: Private Security Group ID AZ-A
    Type: AWS::EC2::SecurityGroup::Id
#-------------------------------------------


Conditions: {}


Resources:
#===========================================


#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# PRIVATE EC2 DEFINITION
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


#--- Private EC2 Instance
#-------------------------------------------
  PrivateEC2Instance:
    Type: AWS::EC2::Instance
#.............................
    CreationPolicy:
      ResourceSignal:    
        Count: 1
        Timeout: "PT10M"
#.............................
    Properties:
#.............................
      Tags:
        -
          Key: "Name"
          Value: "openvpn-private"
#.............................
      AvailabilityZone:
        'Fn::Select':
          - '0'
          - 'Fn::GetAZs':
              Ref: 'AWS::Region'
#.............................
      DisableApiTermination: false
      IamInstanceProfile: "dh-openvpn-server-system-administrator"
      ImageId: !Ref PrivateAmiId
      InstanceType: "t2.nano"
      KeyName: !Sub "dh.ec2.ssh.admin.console_${AWS::Region}"
      Monitoring: false
#      SubnetId:
#        Ref: PrivateSubnetIdA
#      SecurityGroupIds:
#        - !Ref PrivateSgResourceId
#.............................
      BlockDeviceMappings: 
      - 
        DeviceName: "/dev/xvda"
        Ebs: 
          Encrypted: true
          VolumeSize: 8
          VolumeType: "gp2"
          DeleteOnTermination: true
#.............................
      NetworkInterfaces: 
      - 
        Description: "Primary Private NIC"
        DeleteOnTermination: true
        DeviceIndex: 0
        PrivateIpAddress: 10.0.0.10
        SubnetId: !Ref PrivateSubnetIdA
        GroupSet: 
          - !Ref PrivateSgResourceId
#.............................
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            # Update Packages, inc. aws-cfn-bootstrap
            yum update -y
            # Fix openssl error (easy-rsa) : random seed file 
            export RANDFILE=/tmp/.rnd 
            # Start cfn-init
            /opt/aws/bin/cfn-init -v --configsets Step1 --stack ${AWS::StackId} --resource PrivateEC2Instance --region ${AWS::Region} || error_exit 'Failed to run cfn-init'
            # Start up the cfn-hup daemon to listen for changes to the EC2 instance metadata
            #/opt/aws/bin/cfn-hup || error_exit 'Failed to start cfn-hup'
            # All done so signal success
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource PrivateEC2Instance --region ${AWS::Region}
#.............................
    Metadata:
      Comment: Metadata description here.
#,,,,,,,,,,,,,,
      AWS::CloudFormation::Authentication: 
        rolebased: 
          type: "S3"
          buckets: 
            - !Ref ProjectName
          roleName: "dh-openvpn-server-system-administrator"
#,,,,,,,,,,,,,,
      AWS::CloudFormation::Init:
        configSets:
          Step1:
            - configMisc
            - configRepo
            - configYum
            - configHardenSsh
            - configIPtables
            - configLogs
            - configEasyRSA
            - configOpenvpn

#,,,,,,,,,,,,,,,,,,,,,,,,,,,,
#        configTemplate:
#          packages: {}
#          groups: {}
#          users: {}
#          sources: {}
#          files: {}
#          commands: {}
#          services: {}
#,,,,,,,,,,,,,,,,,,,,,,,,,,,,


        configMisc:
          commands:
            1_dhcpv6:
              command: "sed -i 's/DHCPV6C=yes/DHCPV6C=no/' /etc/sysconfig/network-scripts/ifcfg-eth0"
            2_timePool:
              command: "sed -i 's/^pool/#&/' /etc/chrony.conf"
            3_persistLogs:
              command: "sed -i 's/.*Storage.*/Storage=persistent/' /etc/systemd/journald.conf"
          services:
            sysvinit:
              network:
                ensureRunning: "true"
                enabled: "true"
                commands:
                  - "1_dhcpv6"
              chronyd:
                ensureRunning: "true"
                enabled: "true"
                commands:
                  - "2_timePool"
              systemd-journald:
                ensureRunning: "true"
                enabled: "true"
                commands:
                  - "3_persistLogs"


#,,,,,,,,,,,,,,,,,,,,,,,,,,,,        
        configRepo:
          packages:
            rpm:
              epel: "https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm"
          commands:
            1a_epel:
              command: "yum-config-manager --enable epel"
            1b_epel:
              command: 'sed -i "/\[epel\]/a priority=20" /etc/yum.repos.d/epel.repo'


#,,,,,,,,,,,,,,,,,,,,,,,,,,,,        
        configYum:
          packages:
            yum:
              yum-cron: []
          commands:
            1a_yumCron:
              command: "sed -i 's/.*update_cmd.*/update_cmd = security/' /etc/yum/yum-cron.conf"
            1b_yumCron:
              command: "sed -i 's/.*apply_updates.*/apply_updates = yes/' /etc/yum/yum-cron.conf"
          services:
            sysvinit:
              yum-cron:
                ensureRunning: "true"
                enabled: "true"
                commands:
                  - "1b_yumCron"


#,,,,,,,,,,,,,,,,,,,,,,,,,,,,
        configHardenSsh:
          packages:
            yum:
              fail2ban: []
          sources:
            /tmp:
              !Join
                - ""
                - - "https://"
                  - !Ref ProjectName
                  - ".s3."
                  - !Ref "AWS::Region"
                  - ".amazonaws.com/"
                  - "ssh/dh-openvpn-ec2-harden-ssh.sh.tar.gz"
          files:
            "/etc/fail2ban/jail.local":
              content: |
                [sshd]
                enabled = true
                ignoreip = 127.0.0.1/8
                bantime = 600
                findtime = 600
                maxretry = 3
                mode = aggressive
                banaction = iptables-multiport
              mode: '000644'
              owner: root
              group: root
          commands:
            fail2ban:
              cwd: "/etc/fail2ban/jail.d"
              command: "mv 00-firewalld.conf 00-firewalld.disable"
            HardenSsh:
              cwd: "/tmp/ssh"
              command: "./dh-openvpn-ec2-harden-ssh.sh"
          services:
            sysvinit:
              firewalld:
                ensureRunning: "false"
                enabled: "false"
              fail2ban: 
                enabled: "true"
                ensureRunning: "true"
                files:
                  - "/etc/fail2ban/jail.local"
                commands: 
                  - "fail2ban"
              sshd:
                enabled: "true"
                ensureRunning: "true"
                commands:
                  - "HardenSsh"


#,,,,,,,,,,,,,,,,,,,,,,,,,,,,
        configIPtables:
          packages:
            yum:
              iptables-services: []
          sources:
            /tmp:
              !Join
                - ""
                - - "https://"
                  - !Ref ProjectName
                  - ".s3."
                  - !Ref "AWS::Region"
                  - ".amazonaws.com/"
                  - "iptables/dh-openvpn-ec2-priv-iptables.sh.tar.gz"
          files:
            "/etc/sysctl.d/30-dh-openvpn-iptables.conf":
              content: |
                #net.ipv4.ip_forward = 1
                net.ipv6.conf.default.disable_ipv6 = 1
                net.ipv6.conf.all.disable_ipv6 = 1
                kernel.randomize_va_space = 1
                net.ipv4.conf.default.rp_filter = 1
                net.ipv4.conf.all.rp_filter = 1
                net.ipv4.tcp_syncookies = 1
              mode: '000644'
              owner: root
              group: root
          commands:
            1_kernelParams:
              command: "sysctl -p /etc/sysctl.d/30-dh-openvpn-iptables.conf"
            2_iptRules:
              cwd: "/tmp/iptables"
              command: "./dh-openvpn-ec2-priv-iptables.sh"
          services:
            sysvinit:
              iptables:
                ensureRunning: "true"
                enabled: "true"
                commands:
                  - "2_iptRules"


#,,,,,,,,,,,,,,,,,,,,,,,,,,,,
        configLogs:
          files:
#---------------------------
            "/etc/rsyslog.d/30-iptables.conf":
              content: |
                :msg, startswith, "IPTlog" -/var/log/dh-openvpn-server-iptables.log
                & stop
              mode: '000644'
              owner: root
              group: root
#---------------------------
            "/etc/logrotate.d/dh-openvpn-logs":
              content: |
                /var/log/dh-openvpn-server-*.log
                {
                 notifempty
                 rotate 21
                 maxsize 500k
                 daily
                 maxage 7
                 copytruncate
                 dateext
                 dateformat .%Y%m%d-%H-%s
                 compress
                 nomail
                 sharedscripts
                 postrotate
                   systemctl restart rsyslog.service
                 endscript
                }
              mode: '000644'
              owner: root
              group: root
#---------------------------
            "/etc/cron.d/dh-openvpn-logs-schedule":
              content: |
                */30 * * * * root /sbin/logrotate /etc/logrotate.d/dh-openvpn-logs
              mode: '000644'
              owner: root
              group: root
          services:
            sysvinit:
              rsyslog:
                ensureRunning: "true"
                enabled: "true"
                files:
                  - "/etc/rsyslog.d/30-iptables.conf"


#,,,,,,,,,,,,,,,,,,,,,,,,,,,,
        configEasyRSA:
          packages:
            yum:
              easy-rsa: []
          files:
            "/usr/local/easy-rsa/vars":
              content: |
                set_var EASYRSA_REQ_CN "dh-openvpn-server-cert-auth"
                set_var EASYRSA_BATCH "yes"
                set_var EASYRSA_ALGO ec
                set_var EASYRSA_CURVE secp521r1
                set_var EASYRSA_KEY_SIZE 4096
                set_var EASYRSA_DIGEST "sha512"
              mode: '000644'
              owner: root
              group: root
          sources:
            /tmp/sign-reqs:
              !Join
                - ""
                - - "https://"
                  - !Ref ProjectName
                  - ".s3."
                  - !Ref "AWS::Region"
                  - ".amazonaws.com/"
                  - "easy-rsa/sign-reqs/dh-openvpn-easyrsa-sign-reqs.tar.gz"
          commands:
            1a_initPKI:
              command: "mkdir -p /usr/local/easy-rsa && cp -r /usr/share/easy-rsa/3/* $_"
            1b_initPKI:
              cwd: "/usr/local/easy-rsa"
              command: "./easyrsa init-pki"
            2a_buildCA:
              cwd: "/usr/local/easy-rsa"
              command: "./easyrsa build-ca nopass"
            2b_buildCA:
              cwd: "/usr/local/easy-rsa/pki"
              command: "cp ca.crt issued/"
            3_importReqs:
              cwd: "/usr/local/easy-rsa"
              command: "for REQUEST in /tmp/sign-reqs/*; do ./easyrsa import-req $REQUEST $(basename $REQUEST .req); done"
            4a_signReqs:
              cwd: "/usr/local/easy-rsa"
              command: "for REQUEST in /usr/local/easy-rsa/pki/reqs/*; do EntityName=$(basename $REQUEST .req); ./easyrsa sign-req ${EntityName##*-} $EntityName; done"
            4b_signReqs_1:
              cwd: "/usr/local/easy-rsa/pki/issued"
              command: 
#                !Sub "tar -czf - ca.crt *server.crt | aws s3 cp - s3://${ProjectName}/easy-rsa/issued-certs/dh-openvpn-easyrsa-issued-certs-server.tar.gz"
                !Sub "tar -czf - ca.crt *server.crt | aws s3 cp - s3://${ProjectName}/openvpn/server/crt/dh-openvpn-server-crt.tar.gz"
            4b_signReqs_2:
              cwd: "/usr/local/easy-rsa/pki/issued"
              command: 
#                !Sub "tar -czf - ca.crt *client.crt | aws s3 cp - s3://${ProjectName}/easy-rsa/issued-certs/dh-openvpn-easyrsa-issued-certs-client.tar.gz"
                !Sub "tar -czf - ca.crt *client.crt | aws s3 cp - s3://${ProjectName}/openvpn/client/crt/dh-openvpn-client-crt.tar.gz"


#,,,,,,,,,,,,,,,,,,,,,,,,,,,,
        configOpenvpn:
          commands:
            1_cmd: 
              cwd: "/tmp"
              command: "mkdir openvpn-client-files"
            2_cmd:
              cwd: "/tmp/openvpn-client-files"
              command: "cp /usr/local/easy-rsa/pki/ca.crt ."
            3_cmd:
              cwd: "/tmp/openvpn-client-files"
              command: "cp /usr/local/easy-rsa/pki/issued/*client.crt ."
#            4_cmd:
#              cwd: "/tmp/openvpn-client-files"
#              command: 
#                !Sub 'aws s3 sync s3://${ProjectName}/openvpn/client/key/ . --exclude "*" --include "*.key"'
#            5_cmd:
#              cwd: "/tmp/openvpn-client-files"
#              command: 
#                !Sub "tar -czf - * | aws s3 cp - s3://${ProjectName}/openvpn/client/openvpn-client-files.tar.gz"


#,,,,,,,,,,,,,,,,,,,,,,,,,,,,


#-------------------------------------------



#Outputs: {}
Outputs:
#===========================================


#--- Private Instance ID
#-------------------------------------------
  PrivEC2InstanceId:
    Description: Stack1 Private Instance ID
    Value:
      Ref: PrivateEC2Instance
#-------------------------------------------