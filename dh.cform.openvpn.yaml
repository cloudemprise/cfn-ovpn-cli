AWSTemplateFormatVersion: 2010-09-09
Description: OpenVPN eu-central-1
Resources:
#===========================================
# TOP LEVEL DEFINITIONS
#===========================================

#---Top Level VPC Definition
#-------------------------------------------
    VPC:
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: 172.16.0.0/16
            EnableDnsHostnames: 'true'
            EnableDnsSupport: 'true'
            Tags:
            -   Key: "Name"
                Value: "VPN.VPC"
            -   Key: "Application"
                Value: "OpenVPN"
#-------------------------------------------

#===========================================
# PUBLIC SUBNET DEFINITIONS
#===========================================

#--- VPC Internet Gateway
#-------------------------------------------
    InternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
            -   Key: "Name"
                Value: "VPN.IGW"
            -   Key: "Application"
                Value: "OpenVPN"
    AttachInternetGateway:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            VpcId:
                !Ref VPC
            InternetGatewayId:
                !Ref InternetGateway
#-------------------------------------------

#--- AZ1 Public Subnet
#-------------------------------------------
    PublicSubnetAZ1:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId:
                !Ref VPC
            CidrBlock: 172.16.128.0/20
            AvailabilityZone: "eu-central-1a"
            MapPublicIpOnLaunch: 'true'
            Tags:
            -   Key: "Name"
                Value: "VPN.PublicAZ1"
            -   Key: "Application"
                Value: "OpenVPN"
#-------------------------------------------

#--- Public Subnet Route Table
#-------------------------------------------
    PublicSubnetRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId:
                !Ref VPC
            Tags:
            -   Key: "Name"
                Value: "VPN.Public"
            -   Key: "Application"
                Value: "OpenVPN"
    PublicSubnetRoute:
        DependsOn: AttachInternetGateway
        Type: AWS::EC2::Route
        Properties:
            RouteTableId:
                !Ref PublicSubnetRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId:
                !Ref InternetGateway
#-------------------------------------------
    PublicSubnetAZ1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId:
                !Ref PublicSubnetAZ1
            RouteTableId:
                !Ref PublicSubnetRouteTable
#-------------------------------------------

#===========================================
# PRIVATE SUBNET DEFINITIONS
#===========================================

#--- AZ1 NAT Gateway & EIP
#-------------------------------------------
    NATAZ1EIP:
        DependsOn: AttachInternetGateway
        Type: AWS::EC2::EIP
        Properties:
            Domain: vpc
#-------------------------------------------
    NATGatewayAZ1:
        DependsOn: AttachInternetGateway
        Type: AWS::EC2::NatGateway
        Properties:
            AllocationId:
                Fn::GetAtt:
                - NATAZ1EIP
                - AllocationId
            SubnetId:
                !Ref PublicSubnetAZ1
#-------------------------------------------

#--- AZ1 Private Subnet
#-------------------------------------------
    PrivateSubnetAZ1:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId:
                !Ref VPC
            CidrBlock: 172.16.0.0/19
            AvailabilityZone: "eu-central-1a"
            Tags:
            -   Key: "Name"
                Value: "VPN.PrivateAZ1"
            -   Key: "Application"
                Value: "OpenVPN"
#-------------------------------------------

#--- Private Subnet Route Table
#-------------------------------------------
    PrivateSubnetAZ1RouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId:
                !Ref VPC
            Tags:
            -   Key: "Name"
                Value: "VPN.PrivateAZ1"
            -   Key: "Application"
                Value: "OpenVPN"
    PrivateSubnetAZ1Route:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId:
                !Ref PrivateSubnetAZ1RouteTable
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId:
                !Ref NATGatewayAZ1
#-------------------------------------------
    PrivateSubnetAZ1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId:
                !Ref PrivateSubnetAZ1
            RouteTableId:
                !Ref PrivateSubnetAZ1RouteTable
#-------------------------------------------

#===========================================
# SECURITY GROUP DEFINITIONS
#===========================================

#--- Public Subnet Security Group
#-------------------------------------------
    PublicSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            VpcId:
                !Ref VPC
            GroupDescription: OpenVPN PublicSecurityGroup
            Tags:
            -   Key: "Name"
                Value: "VPN.SG-Public"
            -   Key: "Application"
                Value: "OpenVPN"
            SecurityGroupIngress:
            -   Description: SSH External
                IpProtocol: tcp
                FromPort: 22
                ToPort: 22
                CidrIp: 0.0.0.0/0
            -   Description: OpenVPN TCP
                IpProtocol: tcp
                FromPort: 1194
                ToPort: 1194
                CidrIp: 0.0.0.0/0
            -   Description: OpenVPN UDP
                IpProtocol: udp
                FromPort: 1194
                ToPort: 1194
                CidrIp: 0.0.0.0/0
            -   Description: Ping External
                IpProtocol: icmp
                FromPort: 8
                ToPort: -1
                CidrIp: 0.0.0.0/0
            -   Description: Ping Local
                IpProtocol: icmp
                FromPort: 8
                ToPort: -1
                CidrIp: 172.16.0.0/16

#--- Private Subnet Security Group
#-------------------------------------------
    PrivateSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            VpcId:
                !Ref VPC
            GroupDescription: OpenVPN PrivateSecurityGroup
            Tags:
            -   Key: "Name"
                Value: "VPN.SG-Private"
            -   Key: "Application"
                Value: "OpenVPN"
    PrivateInboundRuleSSH:
        Type: AWS::EC2::SecurityGroupIngress
        Properties:
          GroupId:
            !GetAtt PrivateSecurityGroup.GroupId
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId:
            !GetAtt PublicSecurityGroup.GroupId
    PrivateInboundRuleICMP:
        Type: AWS::EC2::SecurityGroupIngress
        Properties:
          GroupId:
            !GetAtt PrivateSecurityGroup.GroupId
          IpProtocol: icmp
          FromPort: 8
          ToPort: -1
          SourceSecurityGroupId:
            !GetAtt PublicSecurityGroup.GroupId
#-------------------------------------------

#===========================================
# NACL DEFINITIONS
#===========================================

#--- Public NACL Group
#-------------------------------------------
    PublicNAcl:
        Type: AWS::EC2::NetworkAcl
        Properties:
            VpcId:
                !Ref VPC
            Tags:
            -   Key: "Name"
                Value: "VPN.PublicNAcl"
            -   Key: "Application"
                Value: "OpenVPN"
#-------------------------------------------
    PublicSubetNAclAssociation:
        Type: AWS::EC2::SubnetNetworkAclAssociation
        Properties:
            NetworkAclId:
                !Ref PublicNAcl
            SubnetId:
                !Ref PublicSubnetAZ1
#--- Ingress Public NACL Group
#-------------------------------------------
    PublicNAclIngress10:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId:
                !Ref PublicNAcl
            Egress: 'false'
            RuleNumber: 10
            Protocol: 6
            RuleAction: allow
            CidrBlock: 10.0.0.0/16
            PortRange:
                From: 80
                To: 80
#-------------------------------------------
    PublicNAclIngress11:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId:
                !Ref PublicNAcl
            Egress: 'false'
            RuleNumber: 11
            Protocol: 6
            RuleAction: allow
            CidrBlock: 10.0.0.0/16
            PortRange:
                From: 443
                To: 443
#-------------------------------------------
    PublicNAclIngress50:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId:
                !Ref PublicNAcl
            Egress: 'false'
            RuleNumber: 50
            Protocol: 6
            RuleAction: allow
            CidrBlock: 0.0.0.0/0
            PortRange:
                From: 22
                To: 22
#-------------------------------------------
    PublicNAclIngress60:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId:
                !Ref PublicNAcl
            Egress: 'false'
            RuleNumber: 60
            Protocol: 6
            RuleAction: allow
            CidrBlock: 0.0.0.0/0
            PortRange:
                From: 1194
                To: 1194
#-------------------------------------------
    PublicNAclIngress61:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId:
                !Ref PublicNAcl
            Egress: 'false'
            RuleNumber: 61
            Protocol: 17
            RuleAction: allow
            CidrBlock: 0.0.0.0/0
            PortRange:
                From: 1194
                To: 1194
#-------------------------------------------
    PublicNAclIngress62:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId:
                !Ref PublicNAcl
            Egress: 'false'
            RuleNumber: 62
            Protocol: 6
            RuleAction: allow
            CidrBlock: 0.0.0.0/0
            PortRange:
                From: 1024
                To: 65535
#-------------------------------------------
    PublicNAclIngress63:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId:
                !Ref PublicNAcl
            Egress: 'false'
            RuleNumber: 63
            Protocol: 17
            RuleAction: allow
            CidrBlock: 0.0.0.0/0
            PortRange:
                From: 1024
                To: 65535
#-------------------------------------------
    PublicNAclIngress70:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId:
                !Ref PublicNAcl
            Egress: 'false'
            RuleNumber: 70
            Protocol: 1
            RuleAction: allow
            CidrBlock: 0.0.0.0/0
            Icmp:
                Type: 8
                Code: -1
#-------------------------------------------
    PublicNAclIngress71:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId:
                !Ref PublicNAcl
            Egress: 'false'
            RuleNumber: 71
            Protocol: 1
            RuleAction: allow
            CidrBlock: 0.0.0.0/0
            Icmp:
                Type: 0
                Code: -1
#-------------------------------------------
    PublicNAclIngress100:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId:
                !Ref PublicNAcl
            Egress: 'false'
            RuleNumber: 100
            Protocol: -1
            RuleAction: deny
            CidrBlock: 0.0.0.0/0
#--- Egress Public NACL Group
#-------------------------------------------
    PublicNAclEgress10:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId:
                !Ref PublicNAcl
            Egress: 'true'
            RuleNumber: 10
            Protocol: 6
            RuleAction: allow
            CidrBlock: 10.0.0.0/16
            PortRange:
                From: 22
                To: 22
#-------------------------------------------
    PublicNAclEgress50:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId:
                !Ref PublicNAcl
            Egress: 'true'
            RuleNumber: 50
            Protocol: 6
            RuleAction: allow
            CidrBlock: 0.0.0.0/0
            PortRange:
                From: 80
                To: 80
#-------------------------------------------
    PublicNAclEgress51:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId:
                !Ref PublicNAcl
            Egress: 'true'
            RuleNumber: 51
            Protocol: 6
            RuleAction: allow
            CidrBlock: 0.0.0.0/0
            PortRange:
                From: 443
                To: 443
#-------------------------------------------
    PublicNAclEgress52:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId:
                !Ref PublicNAcl
            Egress: 'true'
            RuleNumber: 52
            Protocol: 6
            RuleAction: allow
            CidrBlock: 0.0.0.0/0
            PortRange:
                From: 22
                To: 22
#-------------------------------------------
    PublicNAclEgress53:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId:
                !Ref PublicNAcl
            Egress: 'true'
            RuleNumber: 53
            Protocol: 17
            RuleAction: allow
            CidrBlock: 0.0.0.0/0
            PortRange:
                From: 53
                To: 53
#-------------------------------------------
    PublicNAclEgress54:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId:
                !Ref PublicNAcl
            Egress: 'true'
            RuleNumber: 54
            Protocol: 6
            RuleAction: allow
            CidrBlock: 0.0.0.0/0
            PortRange:
                From: 53
                To: 53
#-------------------------------------------
    PublicNAclEgress60:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId:
                !Ref PublicNAcl
            Egress: 'true'
            RuleNumber: 60
            Protocol: 6
            RuleAction: allow
            CidrBlock: 0.0.0.0/0
            PortRange:
                From: 1024
                To: 65535
#-------------------------------------------
    PublicNAclEgress61:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId:
                !Ref PublicNAcl
            Egress: 'true'
            RuleNumber: 61
            Protocol: 17
            RuleAction: allow
            CidrBlock: 0.0.0.0/0
            PortRange:
                From: 1024
                To: 65535
#-------------------------------------------
    PublicNAclEgress70:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId:
                !Ref PublicNAcl
            Egress: 'true'
            RuleNumber: 70
            Protocol: 1
            RuleAction: allow
            CidrBlock: 0.0.0.0/0
            Icmp:
                Type: 8
                Code: -1
#-------------------------------------------
    PublicNAclEgress71:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId:
                !Ref PublicNAcl
            Egress: 'true'
            RuleNumber: 71
            Protocol: 1
            RuleAction: allow
            CidrBlock: 0.0.0.0/0
            Icmp:
                Type: 0
                Code: -1
#-------------------------------------------
    PublicNAclEgress100:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId:
                !Ref PublicNAcl
            Egress: 'true'
            RuleNumber: 100
            Protocol: -1
            RuleAction: deny
            CidrBlock: 0.0.0.0/0

